$width: 18em;
$r-wheel: $width * 0.5; // rayon roue
$w-wheel: 2em; // épaisseur roue
$r-sample: 0.5em; // rayon 

#color-picker {
    width: $width * 2;
    display: grid;
    grid-template-columns: 1fr 1fr;

    &>* {
        @include grid-center;
    }
}

.wheel,
#canvas {
    touch-action: none;
}

#wheel__container {
    grid-area: 1/1;
    width: $width;
    position: relative;

    button {
        position: absolute;
        @include size(4em);
        bottom: 0;
        right: 0;
    }
}

.hue__rotation {
    position: absolute;
    color: #fff;
    transform-origin: $r-wheel $r-wheel;
    transform: rotate(calc(135deg + var(--hue-rotation))); // 135deg to go from the top left corner of the container to the 0deg position
    
    &-content {
        position: absolute;
        top: 2em;
        left: 2em;
        font-size: .8em;
        transform: translate(-50%, -50%) rotate(calc((var(--hue-rotation) * -1) - 135deg));
    }
}

#color__container {
    grid-area: 1/2;
    position: relative;

    &>* {
        grid-area: 1/1;
    }
}

.wheel {
    position: relative;
    @include size($width);
    grid-area: 1/1;
    border-radius: 50%;
    background-image: conic-gradient(from 90deg, steps(8));
    mask-image: radial-gradient(closest-side, #0000 calc(#{$r-wheel - $w-wheel} - 1px), #000 #{$r-wheel - $w-wheel});
}

// circle to sample hue on the color wheel
.sample {
    box-sizing: border-box;
    @include size(#{$r-sample * 2});
    position: absolute;
    top: calc(50% - #{$r-sample});
    left: calc(100% - #{math.div($w-wheel, 2) + $r-sample});
    transform-origin: (($r-wheel - (math.div($w-wheel, 2) + $r-sample)) * -1) #{$r-sample};
    transform: rotate(var(--hue-rotation));
    border: 2px solid #fff;
    border-radius: 50%;
    z-index: 10;
    box-shadow: 0px 0px 4px rgba(0, 0, 0, .75);
    touch-action: none;

    &:hover {
        cursor: pointer;
    }

    &.load-swatch {
        transition: transform .5s ease-in-out;
    }
}


#canvas {
    @include size(($r-wheel - $w-wheel) * math.sqrt(2));
    grid-area: 1/1;
    place-self: center;
    background-color: hsl(var(--hue-rotation), 100%, 50%);
    z-index: 10;

    &:hover {
        cursor: crosshair;
    }
}

// Actual selected color
.picked-color {
    @include size(($r-wheel - $w-wheel) * math.sqrt(2));
    position: relative;
    grid-area: 1/2;
    background-color: var(--color-picked);
    // border: 1px solid #fff8;

    &::after {
        content: attr(data-color-picked);
        @include grid-center;
        position: absolute;
        bottom: 0;
        left: 0;
        padding: .4em .8em;
        border-top-right-radius: 2em;
        background-color: rgba(0, 0, 0, .75);
    }
}

.info {
    font-family: sans-serif;
    font-weight: 400;
    color: #fffb;
}

button {
    appearance: none;
    border: 0;
    background-color: transparent;

    & svg {
        fill: hotpink;
        @include size(100%);

        // !important ! le svg ne doit pas capter les clics, ça simplifie bcq la gestion des boutons
        pointer-events: none;

        &:hover {
            fill: deepskyblue;
        }
    }
}

/* ------------------- Color swatches -- */
#swatches {
    position: relative;
    max-width: 80vw;
    @include grid-center;
    grid-template-columns: repeat(auto-fill, var(--swatch-size));
    gap: .8em;
    padding-bottom: 3em;
    // overflow: hidden;
}

.swatch {
    $radius: 2em;
    height: var(--swatch-size);
    border-top-left-radius: $radius;
    border-bottom-right-radius: $radius;
    position: relative;
    overflow: hidden;
    transform: scale(1);
    transition: transform .5s cubic-bezier(0.5, -0.5, 0.75, 1.5);
    z-index: auto;

    // make sure that the btns' tooltips are not hidden behind the other swatches
    &:focus-within {
        z-index: 10;
    }

    &:hover {
        z-index: 12;
    }

    // show/hide tools btns
    & .btns{
        & .btn__col:nth-child(1) {
            opacity: 1;
            visibility: visible;
        }
        & .btn__col:nth-child(2) {
            opacity: 0;
            visibility: hidden;
        }
    }
    &.tools .btns{
        & .btn__col:nth-child(1) {
            opacity: 0;
            visibility: hidden;
        }
        & .btn__col:nth-child(2) {
            opacity: 1;
            visibility: visible;
        }
    }
    // display color RGB values
    // but not when the swatch is dragged
    &:not(.over)::after {
        position: absolute;
        content: attr(data-bg-color);
        width: 100%;
        height: $radius;
        bottom: 0;
        left: 0;
        @include grid-center;
        border-top-left-radius: $radius;
        font-size: .8em;
        background-color: rgba(0, 0, 0, .5);
        z-index: 1;
        opacity: 0;
        transform: translateX(100%);
        transition: transform .25s ease-in-out,
            opacity .25s linear;
    }

    &.cleared {
        transform: scale(0);
    }

    &:hover:not(.over)::after {
        // display rgb values on hover
        transform: translateX(0);
        opacity: 1;
    }

    &.over {
        // Drop zone
        border: 4px dashed #444;
        background-color: #777 !important;
        box-sizing: border-box;

        &::before {
            position: absolute;
            content: 'Drop Me!';
            @include inset0;
            @include grid-center;
            font-family: sans-serif;
            font-weight: 600;
            font-size: 1.5em;
            color: #fff4;
        }

        // swatch's buttons are masked when dragging
        & .btns {
            display: none;
        }
    }
}

// Swatch buttons columns
// 2 columns, only one displayed at the time
$btn-width: 32px;

.btns {
    position: absolute;
    width: $btn-width;
    // height: $btn-width * 3;
    top: 0;
    right: 0;
    display: grid;

    & .btn__col {
        grid-area: 1/1;
        height: max-content;
        padding-bottom: .5em;
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        align-items: center;
        border-bottom-left-radius: 1em;
        background-color: rgba(0, 0, 0, .5);
        transition: opacity .25s ease-in-out;


        opacity: 0;
        visibility: hidden;

        &.visible {
            opacity: 1;
            visibility: visible;
        }
    }

    & .btn {
        @include size($btn-width);

        // Tooltips for the buttons
        $arrow: 6px;
        $offset: .5em;
        $tooltip-bg: rgb(49, 49, 49);
        --tooltip-bg: #{$tooltip-bg};
        position: relative;

        &::before,
        &::after {
            position: absolute;
            top: 50%;
            right: 0;
            visibility: hidden;
            opacity: 0;
            transition: opacity .25s ease-in-out;
            z-index: 100;
        }

        // tooltip's arrow
        &::before {
            content: '';
            border: $arrow solid transparent;
            border-right-color: var(--tooltip-bg);
            transform: translate(calc(#{$offset} + 1px), -50%);
            @include size(0);
        }

        // tooltip's container
        &::after {
            content: attr(aria-label);
            // content: attr(aria-labelledby);
            width: max-content;
            height: auto;
            padding: .5em .75em;
            background-color: var(--tooltip-bg);
            color: #fff;
            font-weight: 700;
            text-shadow: 1px 1px 2px darken($tooltip-bg, 15%);
            border-radius: .33em;
            transform: translate(calc(100% + #{$offset}), -50%);
            @include grid-center();
        }

        &:hover::before,
        &:hover::after {
            visibility: visible;
            opacity: 1;
            // tooltip appears only after a delay
            transition-delay: 1s;
        }

        & .svg-icon {
            @include size(#{$btn-width - 4px});
        }
    }
}


// DIV with the button to export color list ------------------------------------
.copyList {
    grid-column: 1/-1;
    height: auto;
    display: none;

    & button {
        display: flex;
        align-items: center;
        gap: .25em;
        padding: .25em .5em;
        background-color: rebeccapurple;
    }

    & .svg-icon {
        @include size(2em);
    }
}

.swatch~.copyList {
    // the DIV is visible only if there is at least one .swatch
    display: block;
}

// Notifications after actions ---------------------------------------------
.notif {
    $h: 3em;
    min-width: 15vw;
    height: $h;
    position: fixed;
    bottom: 0;
    left: 50%;
    @include grid-center;
    transform: translateX(-50%) translateY($h);
    transition-property: transform;
    transition-duration: .125s;
    transition-delay: 3s;
    transition-timing-function: ease-in-out;
    background-color: rgba(0, 0, 0, .5);
    border-top-left-radius: .25em;
    border-top-right-radius: .25em;
    padding: 0 2.5em;

    &.visible {
        transform: translateX(-50%) translateY(0);
        transition-duration: .5s;
        transition-delay: 0s;
    }
}

.hidden {
    // hidden input used by toClipboard() function 
    position: absolute;
    left: -100vw;
}