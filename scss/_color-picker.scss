$width: 18em;
$r-wheel: math.div($width, 2); // rayon roue
$w-wheel: 2em; // épaisseur roue
$r-sample: 0.5em; // rayon 

#color-picker {
    width: $width * 2;
    display: grid;
    grid-template-columns: 1fr 1fr;

    &>* {
        @include grid-center;
        width: $width;
    }
}

.wheel,
#canvas {
    touch-action: none;
}

#wheel__container {
    grid-area: 1/1;
    position: relative;
    
        button {
            position: absolute;
            @include size(2.5em);
            bottom: 0;
            right: 0;
        }
}

#color__container {
    grid-area: 1/2;
    position: relative;

    &>* {
        grid-area: 1/1;
    }
}

.wheel {
    position: relative;
    @include size($width);
    grid-area: 1/1;
    border-radius: 50%;
    background-image: conic-gradient(from 90deg, steps(8));
    mask-image: radial-gradient(closest-side, #0000 calc(#{$r-wheel - $w-wheel} - 1px), #000 #{$r-wheel - $w-wheel});
}

.sample {
    box-sizing: border-box;
    @include size(#{$r-sample * 2});
    position: absolute;
    top: calc(50% - #{$r-sample});
    left: calc(100% - #{math.div($w-wheel, 2) + $r-sample});
    transform-origin: (($r-wheel - (math.div($w-wheel,2) + $r-sample)) * -1) #{$r-sample};
    transform: rotate(var(--hue-rotation));
    border: 2px solid #fff;
    border-radius: 50%;
    z-index: 10;
    box-shadow: 0px 0px 4px rgba(0, 0, 0, .75);
    touch-action: none;

    &:hover {
        cursor: pointer;
    }

    &.load-swatch {
        transition: transform .5s ease-in-out;
    }
}


#canvas {
    @include size(($r-wheel - $w-wheel) * math.sqrt(2));
    grid-area: 1/1;
    place-self: center;
    background-color: hsl(var(--hue-rotation), 100%, 50%);
    z-index: 10;

    &:hover {
        cursor: crosshair;
    }
}

.picked-color {
    @include size(($r-wheel - $w-wheel) * math.sqrt(2));
    position: relative;
    grid-area: 1/2;
    background-color: var(--color-picked);
    border: 1px solid #fff8;

    &::after {
        content: attr(data-color-picked);
        @include grid-center;
        position: absolute;
        bottom: 0;
        left: 0;
        padding: .4em .8em;
        border-top-right-radius: .25em;
        background-color: rgba(0, 0, 0, .75);
    }
}

.info {
    font-family: sans-serif;
    font-weight: 400;
    color: #fffb;
}

button {
    appearance: none;
    border: 0;
    background-color: transparent;

    & svg {
        fill: hotpink;
        width: 100%;
        height: 100%;

        &:hover {
            fill: deepskyblue;
        }
    }
}

/* ------------------- Color swatches -- */

#swatches {
    position: relative;
    width: 80vw;
    @include grid-center;
    grid-template-columns: repeat(auto-fill, var(--swatch-size));
    gap: .8em;
    padding-bottom: 3em;
    overflow: hidden;
}

.swatch {
    height: var(--swatch-size);
    border-top-left-radius: 2em;
    border-bottom-right-radius: 2em;
    position: relative;
    overflow: hidden;
    transform: scale(1);
    transition: transform .5s cubic-bezier(0.5, -0.5, 0.75, 1.5);

    &:not(.over)::after {
        position: absolute;
        content: attr(data-bg-color);
        width: 100%;
        height: 2em;
        bottom: 0;
        left: 0;
        @include grid-center;
        border-top-left-radius: 2em;
        font-size: .8em;
        background-color: rgba(0, 0, 0, .5);
        z-index: 1;
        opacity: 0;
        transform: translateX(100%);
        transition: transform .25s ease-in-out,
            opacity .25s linear;
    }

    &.cleared {
        transform: scale(0);
    }

    &:hover:not(.over)::after {
        transform: translateX(0);
        opacity: 1;
    }

    &.over {
        // Drop zone
        border: 4px dashed #444;
        background-color: #777 !important;
        box-sizing: border-box;

        &::before {
            position: absolute;
            content: 'Drop Me!';
            @include inset0;
            @include grid-center;
            font-family: sans-serif;
            font-weight: 600;
            font-size: 1.5em;
            color: #fff4;
        }

        & .btns {
            display: none;
        }
    }
}

.btns {
    $btn-width: 24px;
    position: absolute;
    width: $btn-width * 2;
    height: $btn-width * 3;
    top: 0;
    right: $btn-width * -1;
    display: grid;
    grid-template-columns: $btn-width $btn-width;

    &:focus-within {
        & button:nth-child(1) {
            grid-area: 1/2;
        }

        & button:nth-child(2) {
            grid-area: 1/1;
        }

        & button:nth-child(3) {
            grid-area: 2/1;
        }

        & button:nth-child(4) {
            grid-area: 3/1;
        }
    }

    & button {
        position: relative;
        @include grid-center;

        &:nth-child(1)::after,
        &:nth-child(4)::after {
            position: absolute;
            content: '';
            width: 100%;
            height: calc(#{$btn-width} + .5em);
            top: 0;
            left: 0;
            background-color: rgba(0, 0, 0, .5);
            border-bottom-left-radius: 1em;
            z-index: -1;
        }

        &:nth-child(1) {
            grid-area: 1/1;
        }

        &:nth-child(2) {
            grid-area: 1/2;
            background-color: rgba(0, 0, 0, .5);
        }

        &:nth-child(3) {
            grid-area: 2/2;
            background-color: rgba(0, 0, 0, .5);
        }

        &:nth-child(4) {
            grid-area: 3/2;
        }
    }

    & .svg-icon {
        @include size(#{$btn-width - 6px});

        &:active {
            // important ! le svg ne doit pas capter les clics, ça simplifie bcq la gestion des boutons
            pointer-events: none;
        }
    }
}


.copyList {
    grid-column: 1/-1;
    height: auto;
    display: none;

    & button {
        display: flex;
        align-items: center;
        gap: .25em;
        padding: .25em .5em;
        background-color: rebeccapurple;
    }

    & .svg-icon {
        @include size(2em);
    }
}

.swatch~.copyList {
    // visible only if there is at least one .swatch
    display: block;
}

.notif {
    $h: 3em;
    min-width: 15vw;
    height: $h;
    position: fixed;
    bottom: 0;
    left: 50%;
    @include grid-center;
    transform: translateX(-50%) translateY($h);
    transition-property: transform;
    transition-duration: .125s;
    transition-delay: 3s;
    transition-timing-function: ease-in-out;
    background-color: rgba(0, 0, 0, .5);
    border-top-left-radius: .25em;
    border-top-right-radius: .25em;
    padding: 0 2.5em;

    &.visible {
        transform: translateX(-50%) translateY(0);
        transition-duration: .5s;
        transition-delay: 0s;
    }
}

.hidden {
    // hidden input used by toClipboard() function 
    position: absolute;
    left: -100vw;
}