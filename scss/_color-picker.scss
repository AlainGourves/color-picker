$width: 18em;
$r-wheel: $width * 0.5; // rayon roue
$w-wheel: 2em; // épaisseur roue
$r-sample: 0.5em; // rayon 

#color-picker {
    width: $width * 2;
    display: grid;
    grid-template-columns: 1fr 1fr;

    &>* {
        @include grid-center;
    }
}

.wheel,
#canvas {
    touch-action: none;
}

#wheel__container {
    grid-area: 1/1;
    width: $width;
    position: relative;

    button {
        position: absolute;
        @include size(4em);
        bottom: -1em;
        right: -2em;
    }
}

.hue__rotation {
    $offset: .4em;
    position: absolute;
    top: $offset;
    left: $offset;
    color: #fff;
    transform-origin: #{$r-wheel - $offset} #{$r-wheel - $offset};
    transform: rotate(calc(135deg + var(--hue-rotation))); // 135deg to go from the top left corner of the container to the 0deg position
    
    $w: 2.1em;
    $font-size: .8em;
    &-content {
        --w: #{$w};
        position: absolute;
        display: grid;
        align-content: center;
        @include size((math.div($w, $font-size)) * 1em);
        font-size: $font-size;
        text-align: center;
        transform:  rotate(calc((var(--hue-rotation) * -1) - 135deg));
    }
    
    &::before,
    &::after{
        content: '';
        position: absolute;
        background-color: rgb(29, 29, 29);
    }

    &::before{
    @include size($w);
        border-radius: 50%;
    }

    &::after{
        @include size(1em);
        bottom: #{$w * -1};
        right: #{$w * -1};
        z-index: -1;
    }
}

#color__container {
    grid-area: 1/2;
    position: relative;

    &>* {
        grid-area: 1/1;
    }
}

.wheel {
    position: relative;
    @include size($width);
    grid-area: 1/1;
    border-radius: 50%;
    background-image: conic-gradient(from 90deg, steps(8));
    mask-image: radial-gradient(closest-side, #0000 calc(#{$r-wheel - $w-wheel} - 1px), #000 #{$r-wheel - $w-wheel});
}

// circle to sample hue on the color wheel
.sample {
    box-sizing: border-box;
    @include size(#{$r-sample * 2});
    position: absolute;
    top: calc(50% - #{$r-sample});
    left: calc(100% - #{math.div($w-wheel, 2) + $r-sample});
    transform-origin: (($r-wheel - (math.div($w-wheel, 2) + $r-sample)) * -1) #{$r-sample};
    transform: rotate(var(--hue-rotation));
    border: 2px solid #fff;
    border-radius: 50%;
    z-index: 10;
    box-shadow: 0 0 4px rgba(0, 0, 0, .75);
    touch-action: none;

    &:hover {
        cursor: pointer;
    }

}
#wheel__container.load-swatch .sample,
#wheel__container.load-swatch .hue__rotation,
#wheel__container.load-swatch .hue__rotation-content {
    transition: transform var(--transition);
}


#canvas {
    @include size(($r-wheel - $w-wheel) * math.sqrt(2));
    grid-area: 1/1;
    place-self: center;
    background-color: hsl(var(--hue-rotation), 100%, 50%);
    z-index: 10;

    &:hover {
        cursor: crosshair;
    }
}

// Actual selected color
.picked-color {
    @include size(($r-wheel - $w-wheel) * math.sqrt(2));
    position: relative;
    grid-area: 1/2;
    background-color: var(--color-picked);
    // border: 1px solid #fff8;

    &::after {
        content: attr(data-color-picked);
        @include grid-center;
        position: absolute;
        bottom: 0;
        left: 0;
        padding: .4em .8em;
        border-top-right-radius: 2em;
        background-color: rgba(0, 0, 0, .75);
    }
}

.info {
    font-family: sans-serif;
    font-weight: 400;
    color: #fffb;
}

button {
    appearance: none;
    border: 0;
    background-color: transparent;

    & svg {
        fill: hotpink;
        @include size(100%);

        // !important ! le svg ne doit pas capter les clics, ça simplifie bcq la gestion des boutons
        pointer-events: none;

        &:hover {
            fill: deepskyblue;
        }
    }
}



// Notifications after actions ---------------------------------------------
.notif {
    $h: 3em;
    min-width: 15vw;
    height: $h;
    position: fixed;
    bottom: 0;
    left: 50%;
    @include grid-center;
    transform: translateX(-50%) translateY($h);
    transition-property: transform;
    transition-duration: .125s;
    transition-delay: 3s;
    transition-timing-function: ease-in-out;
    background-color: rgba(0, 0, 0, .5);
    border-top-left-radius: .25em;
    border-top-right-radius: .25em;
    padding: 0 2.5em;

    &.visible {
        transform: translateX(-50%) translateY(0);
        transition-duration: .5s;
        transition-delay: 0s;
    }
}

.hidden {
    // hidden input used by toClipboard() function 
    position: absolute;
    left: -100vw;
}